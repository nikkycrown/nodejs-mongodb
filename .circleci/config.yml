version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1.4

commands:
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

jobs:
 
  terraform-init:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: Terraform init
          command: |
            cd terraform_setup
            terraform init -input=false
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-plan:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Terraform plan
          command: |
            cd terraform_setup
            terraform plan -out tfapply 
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-apply:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Terraform apply
          command: |
            cd terraform_setup
            terraform apply -auto-approve tfapply
      - persist_to_workspace:
          root: .
          paths:
            - .
      
  terraform-plan-destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform create destroy plan
          command: |
            cd terraform_setup
            terraform plan -destroy -out tfdestroy
      - persist_to_workspace:
          root: .
          paths:
            - .
   

  terraform-destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform destroy
          command: |
            cd terraform_setup
            terraform plan -destroy -out tfdestroy
            

  build-nodejs-app:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout

      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo mv /tmp/docker/* /usr/bin
      
      - setup_remote_docker

      - run:
          name: Build Docker image
          command: |
            cd todo  
            docker build -t nodejs-mongodb_app .
      - run:
          name: Push to Docker Hub
          command: |
            cd todo
            echo "$DOCKER_PASSWORD"
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker tag $APP:latest $DOCKER_USERNAME/$APP
            docker push $DOCKER_USERNAME/$APP
            
  deploy-nodejs-app:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: Configure kubectl
          command: |
            aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
      - run:
          name: Deploy Docker image to EKS cluster
          command: |
            sed -i "s|IMAGE|$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$DOCKER_USERNAME/$APP:latest|g" kubernetes_app/*yaml
            kubectl apply -f kubernetes_app/
            kubectl get pods
            kubectl get services
            
  deploy-sock-shop:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: Configure kubectl
          command: |
            aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
      - run:
          name: Deploy Docker image to EKS cluster
          command: |
            sed -i "s|IMAGE|$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$DOCKER_USERNAME/$APP:latest|g" kubernetes/*yaml
            kubectl create namespace sock-shop
            kubectl apply -f kubernetes/
            
  deploy-prometheus:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: Configure kubectl
          command: |
            aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
      - run:
          name: Deploy Docker image to EKS cluster
          command: |
            sed -i "s|IMAGE|$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$DOCKER_USERNAME/$APP:latest|g" kubernetes/manifests-monitoring/*yaml
            kubectl apply -f kubernetes/manifests-monitoring/
            
workflows:
  version: 2
  nodejs-deployment:
    jobs:
#       - terraform-init
#       - terraform-plan:
#           requires: ["terraform-init"]
#       - hold-apply:
#           type: approval
#           requires: ["terraform-plan"]
#       - terraform-apply:
#           requires: ["hold-apply"]
#       - terraform-plan-destroy:
#           requires: ["terraform-apply"]
#       - hold-destroy:
#           type: approval
#           requires: ["terraform-plan-destroy"]
#       - terraform-destroy:
#           requires: ["hold-destroy"]  
      - build-nodejs-app
#            requires: ["terraform-apply"]
      - deploy-nodejs-app:
          requires: [build-nodejs-app]
      - deploy-sock-shop:
          requires: [build-nodejs-app]
      - deploy-prometheus:
          requires: [build-nodejs-app]
